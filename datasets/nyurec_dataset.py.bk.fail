import torch.utils.data as data
import numpy as np
from imageio import imread
from path import Path
import random
import os

def load_as_float(path):
    return imread(path).astype(np.float32)

class NYURecDataset(data.Dataset):
    """A sequence data loader where the files are arranged in this way:
        root/scene_1/0000000.jpg
        root/scene_1/0000001.jpg
        ..
        root/scene_1/cam.txt
        root/scene_2/0000000.jpg
        .
        transform functions must take in a list a images and a numpy array (usually intrinsics matrix)
    """

    # def __init__(self, root,
    #             filenames, height, width, frame_idxs, num_scales,
    #             is_train=True, sequence_length=3, transform=None, skip_frames=1):

    def __init__(self,
                 data_path,
                 filenames,
                 height,
                 width,
                 frame_idxs,
                 num_scales,
                 is_train=False,
                 img_ext=None, opt=None,
                 sequence_length=3, skip_frames=1):

        self.data_path = Path(data_path)
        scene_list_path = self.data_path/'train.txt' if is_train else self.data_path/'val.txt'
        self.scenes = [self.data_path/folder[:-1] for folder in open(scene_list_path)]
        # self.transform = transform
        self.k = skip_frames
        self.crawl_folders(sequence_length)

    def crawl_folders(self, sequence_length):
        # k skip frames
        sequence_set = []
        demi_length = (sequence_length-1)//2
        shifts = list(range(-demi_length * self.k, demi_length * self.k + 1, self.k))
        shifts.pop(demi_length)
        for scene in self.scenes:
            intrinsics = np.genfromtxt(scene/'cam.txt').astype(np.float32).reshape((3, 3))
            imgs = sorted(scene.files('*.jpg'))

            if len(imgs) < sequence_length:
                continue
            for i in range(demi_length * self.k, len(imgs)-demi_length * self.k):
                sample = {'intrinsics': intrinsics, 'tgt': imgs[i], 'ref_imgs': []}
                for j in shifts:
                    sample['ref_imgs'].append(imgs[i+j])
                sequence_set.append(sample)
        random.shuffle(sequence_set)
        self.samples = sequence_set

    def __getitem__(self, index):
        inputs = {}
        do_color_aug = self.is_train and random.random() > 0.5
        do_flip = self.is_train and random.random() > 0.5

        for ind, i in enumerate(self.frame_idxs):
            # TODO: check
            if not i in set([0, -2, -1, 1, 2]):
                continue
            inputs[("color", i, -1)] = load_as_float(sample['ref_imgs'][ind])
            intrinsics = np.copy(sample['intrinsics'])


        sample = self.samples[index]
        tgt_img = load_as_float(sample['tgt'])
        ref_imgs = [load_as_float(ref_img) for ref_img in sample['ref_imgs']]
        if self.transform is not None:
            imgs, intrinsics = self.transform([tgt_img] + ref_imgs, np.copy(sample['intrinsics']))
            tgt_img = imgs[0]
            ref_imgs = imgs[1:]
        else:
            intrinsics = np.copy(sample['intrinsics'])
        # return tgt_img, ref_imgs, intrinsics, np.linalg.inv(intrinsics)
        return inputs

    def __len__(self):
        return len(self.samples)